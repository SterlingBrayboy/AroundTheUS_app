!function(){"use strict";var e=class{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}},t=class extends e{constructor(e,t){super({popupSelector:e}),this._form=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputEls=[...this._form.querySelectorAll(".modal__input")]}setEventListeners(){this._popupElement.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}},r=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=document.querySelector(t),this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)]}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}toggleButtonState(){if(this._hasInvalidInput(this._inputEls))return this._submitButton.classList.add(this._inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}},o=class{constructor(e,t){let{items:r,renderer:o}=e;this._items=r,this._renderer=o,this._container=document.querySelector(`.${t}`)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}},n=class{constructor(e,t,r,o,n){this._name=e.name,this._link=e.link,this._id=e._id,this._handleImageClick=r,this._handleDeleteClick=o,this._handleLikeClick=n,this._cardSelector=t}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_handleLike=()=>{this._likeButton.classList.toggle("gallery__card-like_active")};handleDelete=()=>{this._element.remove()};_setEventListeners(){this._likeButton.addEventListener("click",this._handleLike),this._deleteFormButton.addEventListener("submit",this._handleDelete),this._cardTrash.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}generateCard(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".gallery__card-like"),this._deleteFormButton=document.querySelector("#delete-card-button"),this._cardTrash=this._element.querySelector(".gallery__card-trash"),this._cardImageEl=this._element.querySelector(".gallery__card-image"),this._setEventListeners(),this._cardImageEl.src=this._link,this._cardImageEl.alt=`Photo of ${this._name}`,this._element.querySelector(".gallery__card-title").textContent=this._name,this._element}};const s={inputSelector:".modal__input",submitButtonSelector:".modal__container-button",inactiveButtonClass:"modal__container-button_disabled",inputErrorClass:"modal__input-error",errorClass:"modal__input-error_visible"},i={profileEditModal:"#profile__edit-modal",profileAddModal:"#profile__add-modal",profileEditForm:document.querySelector("#edit-card-form"),profileAddForm:document.querySelector("#add-card-form"),nameInput:document.querySelector("#profile-name-input"),descriptionInput:document.querySelector("#profile-description-input"),avatarInput:document.querySelector("#avatar-url-input"),avatarImage:document.querySelector(".profile__avatar"),avatarIconSelector:document.querySelector(".profile__icon"),avatarModal:"#avatar-modal",avatarModalButton:document.querySelector("#avatar-modal-button"),addCardClass:"#profile__add-modal",addModalButton:document.querySelector("#add-button"),editCardClass:"#profile__edit-modal",deleteCardClass:"#delete-modal",deleteCardButtonSelector:document.querySelector(".gallery__card-trash"),editModalButton:document.querySelector("#edit-button"),profileEditButtonSelector:document.querySelector("#profile__edit-button"),profileAddButtonSelector:document.querySelector(".profile__add-button")},a=new class{constructor(e){this._headers=e.headers}getInitialCards(){return fetch("https://around-api.en.tripleten-services.com/v1/cards",{headers:{authorization:"ebfbe580-59e8-4623-9d1e-5edf14608279"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}loadInfo(){return fetch("https://around-api.en.tripleten-services.com/v1/users/me",{method:"GET",avatar:"https://practicum-content.s3.us-west-1.amazonaws.com/frontend-developer/moved_avatar.jpg",_id:"e20537ed11237f86bbb20ccb",cohort:"group-42",headers:{authorization:"ebfbe580-59e8-4623-9d1e-5edf14608279"}}).then((e=>e.json())).then((e=>{console.log(e)}))}editProfile(){return fetch("https://around-api.en.tripleten-services.com/v1/users/me",{method:"PATCH",headers:{authorization:"ebfbe580-59e8-4623-9d1e-5edf14608279","Content-Type":"application/json"},body:JSON.stringify({name:"Jacques Cousteau",about:"Sailor, researcher"})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewCard(e){return fetch("https://around-api.en.tripleten-services.com/v1/cards",{method:"POST",headers:{authorization:"ebfbe580-59e8-4623-9d1e-5edf14608279","Content-Type":"application/json"},body:JSON.stringify({name:e.name,link:e.link})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(){return fetch(`https://around-api.en.tripleten-services.com/v1/cards/${_id}`,{method:"DELETE",headers:{authorization:"ebfbe580-59e8-4623-9d1e-5edf14608279","Content-Type":"application/json"},body:JSON.stringify({_id:cardId})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateLike(e,t){return fetch(`https://around-api.en.tripleten-services.com/v1/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:{authorization:"ebfbe580-59e8-4623-9d1e-5edf14608279","Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateAvatar(e){return fetch("https://around-api.en.tripleten-services.com/v1/users/me/avatar",{method:"PATCH",headers:{authorization:"ebfbe580-59e8-4623-9d1e-5edf14608279","Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"ebfbe580-59e8-4623-9d1e-5edf14608279","Content-Type":"application/json"}});let l;a.getInitialCards().then((e=>{l=new o({items:e,renderer:e=>{h(e)}},"gallery__cards"),l.renderItems(),console.log(e)})).catch(console.error),a.loadInfo().then((e=>{console.log(e)})).catch(console.error);const d=new class extends e{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector(".modal__picture-src"),this._title=this._popupElement.querySelector(".modal__picture-title")}open(e){let{link:t,name:r}=e;this._image.src=t,this._image.alt=`A photo of ${r}`,this._title.textContent=`${r}`,super.open()}}("#picture-modal");function c(e,t){e.textContent=t}function u(e){d.open(e)}function h(e){const t=new n(e,"#card-template",u,_,m);l.addItem(t.generateCard())}d.setEventListeners();const p=new class extends e{constructor(e){super({popupSelector:e}),this._formEl=this._popupElement.querySelector(".modal__form")}setEventListeners(){this._formEl.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}setSubmitAction(e){this._handleFormSubmit=e}}(i.deleteCardClass);function _(e){p.open(),p.setSubmitAction((()=>{a.deleteCard(cardId).then((()=>{p.close(),e.handleDelete()})).catch(console.error)}))}function m(e){a.updateLike(e._id,isLiked).then((()=>{e.handleLike()})).catch(console.error)}p.setEventListeners();const v=new r(s,i.profileAddModal);v.enableValidation(),new r(s,i.profileEditModal).enableValidation(),new r(s,i.avatarModal).enableValidation();const E=new t(i.addCardClass,(function(e){c(i.addModalButton,"Saving..."),a.addNewCard(e).then((t=>{console.log(t),h(e),i.profileAddForm.reset(),v.toggleButtonState(),c(i.addModalButton,"Save")})),E.close()}));E.setEventListeners(),i.profileAddButtonSelector.addEventListener("click",(()=>{E.open()}));const f=new t(i.editCardClass,(function(e){c(i.editModalButton,"Saving..."),a.editProfile().then((t=>{y.setUserInfo(e.name,e.description),console.log(t)})).catch(console.error).finally((()=>{c(i.editModalButton,"Save")})),f.close()}));f.setEventListeners(),i.profileEditButtonSelector.addEventListener("click",(()=>{!function(){const e=y.getUserInfo();i.nameInput.value=e.name,i.descriptionInput.value=e.description,f.open()}()}));const S=new t(i.avatarModal,(function(e){c(i.avatarModalButton,"Saving..."),a.updateAvatar(e.link).then((t=>{i.avatarImage.src=e.link,console.log(t)})).catch(console.error).finally((()=>{c(i.avatarModalButton,"Save")})),S.close()}));S.setEventListeners(),i.avatarIconSelector.addEventListener("click",(()=>{S.open()}));const y=new class{constructor(e,t){this._userNameElement=document.querySelector(e),this._userDescriptionElement=document.querySelector(t)}getUserInfo(){return{name:this._userNameElement.textContent,description:this._userDescriptionElement.textContent}}setUserInfo(e,t){this._userNameElement.textContent=e,this._userDescriptionElement.textContent=t}}(".profile__title",".profile__description")}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,